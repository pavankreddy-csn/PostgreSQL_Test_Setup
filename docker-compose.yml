services:
  consul:
    image: consul:1.14
    container_name: consul
    command: "agent -dev -client=0.0.0.0"
    ports:
      - "8500:8500"
    networks:
      - patroni_net

  patroni:
    build:
      context: ./patroni
    container_name: patroni-base
    networks:
      - patroni_net
    # this service is only a build placeholder; actual nodes are pg1, pg2, pg3

  pg1:
    image: patroni_postgres:latest
    container_name: pg1
    environment:
      - PATRONI_SCOPE=${SCOPE}
      - PATRONI_NAME=pg1
      - PATRONI_RESTAPI_CONNECT_ADDRESS=pg1:8008
      - PATRONI_POSTGRESQL_LISTEN=0.0.0.0:5432
      - PATRONI_CONSUL_HOST=consul:8500
      - PATRONI_POSTGRESQL_DATA_DIR=/data/postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./pgdata/pg1:/data/postgres
      - ./patroni/pg1.yml:/etc/patroni.yml
    ports:
      - "54321:5432"
      - "8001:8008"
    networks:
      - patroni_net

  pg2:
    image: patroni_postgres:latest
    container_name: pg2
    environment:
      - PATRONI_SCOPE=${SCOPE}
      - PATRONI_NAME=pg2
      - PATRONI_RESTAPI_CONNECT_ADDRESS=pg2:8008
      - PATRONI_POSTGRESQL_LISTEN=0.0.0.0:5432
      - PATRONI_ETCD_HOST=consul:8500
      - PATRONI_POSTGRESQL_DATA_DIR=/data/postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./pgdata/pg2:/data/postgres
      - ./patroni/pg2.yml:/etc/patroni.yml
    ports:
      - "54322:5432"
      - "8002:8008"
    depends_on:
      - pg1
    networks:
      - patroni_net

  pg3:
    image: patroni_postgres:latest
    container_name: pg3
    environment:
      - PATRONI_SCOPE=${SCOPE}
      - PATRONI_NAME=pg3
      - PATRONI_RESTAPI_CONNECT_ADDRESS=pg3:8008
      - PATRONI_POSTGRESQL_LISTEN=0.0.0.0:5432
      - PATRONI_ETCD_HOST=consul:8500
      - PATRONI_POSTGRESQL_DATA_DIR=/data/postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./pgdata/pg3:/data/postgres
      - ./patroni/pg3.yml:/etc/patroni.yml
    ports:
      - "54323:5432"
      - "8003:8008"
    depends_on:
      - pg1
      - pg2
    networks:
      - patroni_net

  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    depends_on:
      - pg1
      - pg2
      - pg3
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "${HAPROXY_PORT}:5432"
    networks:
      - patroni_net

  barman:
    build:
      context: ./barman
    container_name: barman
    depends_on:
      - haproxy
    environment:
      - BARMAN_PASSWORD=${BARMAN_PASSWORD}
    volumes:
      - ./barman:/etc/barman
      - ./barman_data:/var/lib/barman
      - ./scripts:/opt/lab_scripts
    command: ["sleep","infinity"]
    networks:
      - patroni_net

  app:
    build:
      context: ./app
    container_name: app
    environment:
      - DATABASE_HOST=haproxy
      - DATABASE_PORT=5432
      - DATABASE_USER=${PGAPP_USER}
      - DATABASE_PASSWORD=${PGAPP_PASSWORD}
      - DATABASE_NAME=${POSTGRES_DB}
    ports:
      - "${APP_PORT}:8000"
    depends_on:
      - haproxy
    networks:
      - patroni_net

  dbinit:
    image: postgres:16
    container_name: dbinit
    depends_on:
      - haproxy
    volumes:
      - ./primary/init/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    entrypoint: ["bash","-c"]
    command: "until pg_isready -h haproxy -p 5432; do sleep 1; done; PGPASSWORD=${PGAPP_PASSWORD} psql -h haproxy -U ${PGAPP_USER} -d ${POSTGRES_DB} -f /docker-entrypoint-initdb.d/init_db.sql || true; sleep infinity"
    networks:
      - patroni_net

networks:
  patroni_net:
    driver: bridge